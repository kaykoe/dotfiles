#!/usr/bin/env bash

{{ $cli_packages := dig .osid "cli" ( list ) .packages -}}

function on_path {
	builtin type -P "$1" &>/dev/null
}
function on_path_info {
	if ! on_path "$1"; then
        echo "Installing $1"
        return 1
    fi
}

{{ if eq .osid "linux_ubuntu" "linux_debian" }}
# -----------------------------------------------------
# ALIASES
# -----------------------------------------------------

if on_path "batcat" && ! on_path "bat";then
    {{ if .sudo }}
    sudo ln -s "$(whence -p batcat)" /usr/local/bin/bat
    {{ else }}
    ln -s "$(whence -p batcat)" ~/.local/bin/bat
    {{ end }}
fi

if on_path "fdfind" && ! on_path "fd";then
    {{ if .sudo }}
    sudo ln -s "$(whence -p fdfind)" /usr/local/bin/fd
    {{ else }}
    ln -s "$(whence -p fdfind)" ~/.local/bin/fd
    {{ end }}
fi
{{- end }}

# -----------------------------------------------------
# autoinstalls
# -----------------------------------------------------

[[ -d ~/.local/bin ]] || mkdir -p ~/.local/bin

{{- if .zsh }}
[[ -d ${ZDOTDIR:-~}/.antidote ]] || git clone --depth=1 https://github.com/mattmc3/antidote.git ${ZDOTDIR:-~}/.antidote
{{ end }}
on_path_info 'fzf' || { git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install --bin && {{ if .sudo -}}
sudo ln -s -t /usr/local/bin ~/.fzf/bin/*; }
{{- else -}}
ln -s -t ~/.local/bin ~/.fzf/bin/*; }
{{ end }}

on_path_info 'zoxide' || curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh

on_path_info 'starship' || curl -sS https://starship.rs/install.sh | {{- if not .sudo }} BIN_DIR="$HOME/.local/bin" {{- end }} sh -s -- -y
on_path_info 'pnpm' || { curl -fsSL https://get.pnpm.io/install.sh | sh - && { export PATH="$PATH:$HOME/.local/share/pnpm"; pnpm env use --global 23
    {{- if .zsh }}
    awk '{ if ($0 == "# pnpm") exit; print }' ~/.zshrc | head -n -1 > ~/.zshrc_tmp && mv ~/.zshrc_tmp ~/.zshrc
    {{- end }}
    awk '{ if ($0 == "# pnpm") exit; print }' ~/.bashrc | head -n -1 > ~/.bashrc_tmp && mv ~/.bashrc_tmp ~/.bashrc; }; }

on_path_info 'cargo' || { curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path && . "$HOME/.cargo/env"; }
on_path_info 'rg' || { rustup target add x86_64-unknown-linux-musl && cargo install --git https://github.com/BurntSushi/ripgrep ripgrep --target=x86_64-unknown-linux-musl --features 'pcre2' {{ if .sudo -}}
&& sudo ln -s "$(which rg)" /usr/local/bin/rg
{{- end }}; }

{{ if (or .isWSL .hasGUI) }}
on_path_info 'wallust' || cargo install wallust --locked
{{ end }}

# TODO: eza and fd and ouch completions and manpages
# TODO: total completion system improvement
# TODO: bash config
on_path_info 'bat' || { wget -qO- {{ gitHubLatestReleaseAssetURL "sharkdp/bat" "bat-v*-x86_64-unknown-linux-musl.tar.gz" }} | tar -xzO --wildcards '*/bat' | {{ if .sudo -}}
sudo tee /usr/local/bin/bat &>/dev/null && sudo chmod 755 /usr/local/bin/bat; }
{{- else -}}
tee ~/.local/bin/bat &>/dev/null && chmod 755 ~/.local/bin/bat; }
{{ end }}

on_path_info 'fd' || { wget -qO- {{ gitHubLatestReleaseAssetURL "sharkdp/fd" "fd-v*-x86_64-unknown-linux-musl.tar.gz" }} | tar -xzO --wildcards '*/fd' | {{ if .sudo -}}
sudo tee /usr/local/bin/fd &>/dev/null && sudo chmod 755 /usr/local/bin/fd; }
{{- else -}}
tee ~/.local/bin/fd &>/dev/null && chmod 755 ~/.local/bin/fd; }
{{ end }}

on_path_info 'delta' || { wget -qO- {{ gitHubLatestReleaseAssetURL "dandavison/delta" "delta-*-x86_64-unknown-linux-musl.tar.gz" }} | tar -xzO --wildcards '*/delta' | {{ if .sudo -}}
sudo tee /usr/local/bin/delta &>/dev/null && sudo chmod 755 /usr/local/bin/delta; }
{{- else -}}
tee ~/.local/bin/delta &>/dev/null && chmod 755 ~/.local/bin/delta; }
{{ end }}

on_path_info 'tldr' || { wget -qO- {{ gitHubLatestReleaseAssetURL "tldr-pages/tlrc" "tlrc-v*-x86_64-unknown-linux-musl.tar.gz" }} | tar -xzO tldr | {{ if .sudo -}}
sudo tee /usr/local/bin/fd &>/dev/null && sudo chmod 755 /usr/local/bin/fd; }
{{- else -}}
tee ~/.local/bin/fd &>/dev/null && chmod 755 ~/.local/bin/fd; }
{{ end }}

on_path_info 'eza' || { wget -qO- https://github.com/eza-community/eza/releases/latest/download/eza_x86_64-unknown-linux-musl.tar.gz | tar -xzO | {{ if .sudo -}}
sudo tee /usr/local/bin/eza &>/dev/null && sudo chmod 755 /usr/local/bin/eza; }
{{- else -}}
tee ~/.local/bin/eza &>/dev/null && chmod 755 ~/.local/bin/eza; }
{{ end }}

on_path_info 'rip' || { wget -qO- https://github.com/MilesCranmer/rip2/releases/latest/download/rip-Linux-x86_64-musl.tar.gz | tar -xzO | {{ if .sudo -}}
sudo tee /usr/local/bin/rip &>/dev/null && sudo chmod 755 /usr/local/bin/rip; }
{{- else -}}
tee ~/.local/bin/rip &>/dev/null && chmod 755 ~/.local/bin/rip; }
{{ end }}

on_path_info 'ouch' || { wget -qO- https://github.com/ouch-org/ouch/releases/latest/download/ouch-x86_64-unknown-linux-musl.tar.gz | tar -xzO --wildcards '*/ouch' | {{ if .sudo -}}
sudo tee /usr/local/bin/ouch &>/dev/null && sudo chmod 755 /usr/local/bin/ouch; }
{{- else -}}
tee ~/.local/bin/ouch &>/dev/null && chmod 755 ~/.local/bin/ouch; }
{{ end }}

{{- if not (has "neovim" $cli_packages) }}
{{- $nvim_installed := true }}
{{- if .sudo }}
{{- $nvim_installed = not (glob "/opt/nvim" | empty) }}
{{- else }}
{{- $nvim_installed = not (glob "~/.opt/nvim/squashfs-root/usr/bin/nvim" | empty) }}
{{- end }}
{{- if not $nvim_installed }}
echo 'Installing neovim...'
{{- if .sudo }}
sudo mkdir -p /opt/nvim
wget -qO- {{ gitHubLatestReleaseAssetURL "neovim/neovim" "nvim-linux-x86_64.tar.gz" }} | sudo tar -C /opt/nvim -xz --strip-components 1
{{- else }}
mkdir -p ~/.opt/nvim
wget -q {{ gitHubLatestReleaseAssetURL "neovim/neovim" "nvim-linux-x86_64.appimage" }} -O ~/.opt/nvim/ && \
    cd ~/.opt/nvim && nvim-linux-x86_64.appimage --appimage-extract \
    && rm nvim-linux-x86_64.appimage && ln -s ~/.opt/nvim/squashfs-root/usr/bin/nvim ~/.local/bin/nvim
{{- end }}
{{- end }}
{{- end }}

{{- if .tmux }}
on_path_info 'sesh' || { wget -qO- https://getbin.io/joshmedeski/sesh | tar -xzO sesh > ~/.local/bin/sesh && chmod +x ~/.local/bin/sesh; }
{{ end }}

{{ if .isWSL }}
on_path_info 'win32yank.exe' || { curl -LsSfO https://github.com/equalsraf/win32yank/releases/latest/download/win32yank-x86.zip \
    && sudo unzip win32yank-x86.zip win32yank.exe -d /usr/local/bin/ && sudo chmod 755 /usr/local/bin/win32yank.exe && rm -rf win32yank-x86.zip; }

# for tmux-yank
on_path_info 'clip.exe' || sudo ln -s /mnt/c/Windows/System32/clip.exe /usr/local/bin/clip.exe
{{ end -}}

